#+title: frame-workflow.el: Per-Frame Workflow on Emacs

[[https://travis-ci.org/akirak/frame-workflow.svg?branch=master]]

=Frame-workflow.el= lets you define and organize per-frame workflow for Emacs. This is yet another workspace solution such as eyebrowse, perspective, and framegroups. It is frame-oriented and supports frame-specific states and actions. It is also designed to integrate with [[https://github.com/alphapapa/frame-purpose.el][frame-purpose.el]] which lets you focus on particular things inside a frame.

* Rationale
There are several packages related to workspace management in Emacs. To name a few, perspective.el, eyebrowse, and workgroups are such ones. Some of them seem to be useful, while others are not. They tackle one or two of the following problems: session persistence and multi-tasking.

As for session persistence, desktop.el is a built-in mechanism for Emacs. There are other solutions such as [[https://github.com/tlh/workgroups.el][workgroups]] and [[https://github.com/pashinin/workgroups2][workgroups2]]. For simple use cases, desktop.el seems to work. It is not a perfect solution, and workgroups 1/2 may fill in the need for a more thorough persistence, but I have not looked into them.

The remaining problem is multi-tasking. Emacs allows you to handle multiple different tasks simultaneously inside a single session, but it can easily get messed up with a hundred of buffers. Here are reviews of some packages I found relevant, but there are still issues that need to be addressed.

** EXWM
[[https://github.com/ch11ng/exwm][Emacs X Window Manager (EXWM)]] is a tiling X window manager that can be seamlessly integrated into Emacs. It treats X windows as Emacs buffers and displays each X window in an Emacs window. It does not manage layouts of Emacs windows, but manages X windows, and it supports multiple workspaces as an X window manager. Each workspace in EXWM is just an Emacs frame, and EXWM supports multiple monitors through XRandR. This is an awesome solution, and I have been using it for months.

However, one problem with EXWM is lack of named workspaces. EXWM is based on numbered workspaces. I really dislike the idea. I don't remember things with numbers. I want to use names to refer to things.

I was once a user of [[http://xmonad.org/][XMonad]], a tiling window manager written in Haskell. It allowed configuring workspaces with human-friendly names, and I miss the feature.

As there is no other solution like EXWM, i.e. a window manager that integrates with Emacs, at present, I probably should use it as a daily driver, and it should add support for named workspaces. Fortunately, because workspaces in EXWM are frames in Emacs, it can be implemented as an additional layer for frame management in Emacs.

** framegroups
[[https://github.com/noctuid/framegroups.el][framegroups.el]] is a solution for frame management in Emacs. I found it in [[https://www.reddit.com/r/emacs/comments/8kpn5i/annrfc_framepurposeel_purposespecific_frames/][a Reddit thread]] that announces frame-purpose.el. It does basically what I want. It allows adding a human-friendly name to each frame, switching to another frame by name, and hooks on frame creation and renaming. However, for a couple of reasons, I wanted to rewrite its core to suit my purposes.

Note that each workspace should be assigned a frame. Eyebrowse supports named workspaces, but inside a single frame. This does not work well with winner-mode, which implements undos of window configuration. Therefore such solutions as eyebrowse will be neglected. Framegroups gets it right.

** frame-purpose
[[https://github.com/alphapapa/frame-purpose.el][frame-purpose.el]] is a new package for session management. It does a job of adding a per-frame buffer filter function to each frame created by it. For example, you can create a frame which displays only Emacs Lisp buffers so that you can focus on writing code in the language. This seems to be a promising solution.

It is not a comprehensive solution that can constitute an entire frame-oriented workflow. I find its simplicity of doing one thing being useful and effective, and I need an integration to use it inside my workflow.

** state.el
[[https://github.com/thisirs/state][state.el]] has nothing to do with frames, but it is a library for workflow in Emacs. I found it in [[http://emacs.rubikitch.com/state/][a blog post]] written by [[http://emacs.rubikitch.com/][rubikitch]]. I don't find the package itself useful.  I thought about my workflow using such a model, but the same functionality probably can be implemented in terms of a bunch of functions and keybindings. Furthermore, because winner-mode retains history per frame, it would be better to switch the frame when you switch the context. state.el doesn't provide any support for frames. In conclusion, this package is an inspiration, but not an implementation I am likely to use regularly.

* Goals
The goal of frame-workflow is to provide a framework to make your work (or possibly even life) flow flawlessly. At least it should provide effective help with that.

** One frame for one purpose
For simplicity, each frame should correspond to one task. This is useful for the following reasons:

- Frames are visible and concrete.
- Each frame can have a set of states as frame parameters.
- Each frame can have a history of layout with winner-mode.

frame-purpose lets you focus on particular things in frame-oriented workflow. frame-workflow should be integrated with it.

** Named workspaces
This is a problem with EXWM and was solved by framegroups.el. Frame-workflow needs to reimplement most of framegroups. It may or may not need further enhancements for integration with EXWM.

** Per-frame actions
frame-workflow allows you to define per-frame actions, and they can be persisted across sessions.

** Optional stateful workflow
Although each frame is usually responsible for a single task, it may sometimes be useful to maintain a micro state in it. Frame-workflow supports this feature. Each frame can have a state in a form of a frame parameter, and it can be used to indicate your task-specific work state. This is optional, and you don't have to explicitly define states for all of your task contexts.

* Installation
This package requires Emacs 25.1.

The package is not available on MELPA at present, but it may be added in the future. Clone the repository and add the directory to =load-path=.

It depends on the following packages. You have to install them as well:

- [[https://github.com/magnars/dash.el][dash.el]]
- [[https://github.com/alphapapa/frame-purpose.el][frame-purpose.el]] if you use an integration with the package

* Introduction: Central concepts in frame-workflow
** Prototypes
JavaScript supports a prototype-based objected-oriented programming. Prototypes in frame-workflow are not the same as ones in JavaScript, but it lets you model per-frame workflow. Each prototype corresponds to a process or a task in your workflow, and a frame created by frame-workflow is associated with a prototype. A frame in frame-workflow is something like an object or a monad, and a prototype lets you program the behavior.

Technically, a prototype in frame-workflow is an alist entry in a custom variable. That is, it consists of a name and a value. The name is a symbol, and the value is a plist. The plist holds settings for the prototype.
** Actions
Like Python objects/classes have methods, frame-workflow prototypes have actions. They are defined as a property of the prototype.
** Per-frame states
Each frame in frame-workflow can have a single state variable. This is optional, and it doesn't affect the behavior of frame-workflow at all, 

- Use =:init-form= property of the prototype to produce an initial value of the state
  The property is either a function or an expression, and its returned value is used
  as the initial state.

- Use =frame-workflow-get-state= function to get the current value of the state, and use =frame-workflow-set-state= function to update the state. There is another way to access the value, i.e. directly manipulating the frame parameter, but it is discouraged in terms of API consistency.

Per-frame workflow states can be displayed in your modelines. The format can be customized for each prototype.
* Configuration
** List of prototypes
The most important part of configuration in frame-workflow is prototypes. Configuring prototypes is configuring processes. This can be done by customizing =frame-workflow-prototype-alist= variable. You can set the variable either by using a =setq= statement in your init file or via the Emacs customization interface. The latter is recommended, because frame-workflow has features for extending your workflow interactively as needed and the settings are saved to your custom file.

*** Configuring =custom-file=
As your prototypes are saved to your custom file, it is important to configure the file properly. It should probably be under version control, 

By default, custom variables are saved to your user init file (usually =~/.emacs.d/init.el= or =~/.emacs=), but it can be changed to a separate file by setting =custom-file= variable in your init file.

[[https://github.com/plexus/chemacs][Chemacs]] is a recommended way to configure the custom file. With Chemacs, you can configure your custom file in a separate location from your =~/.emacs.d= repository. This is especially useful if you publish your Emacs configuration to GitHub or somewhere but you keep some personal settings in your custom file.

I personally use the following =~/.emacs-profiles.el= configuration for Chemacs:

#+BEGIN_SRC emacs-lisp
  (("default" . ((user-emacs-directory . "~/.emacs.d")
                 (custom-file . "~/ops/custom.el")))
   ("devel" . ((user-emacs-directory . "~/github/emacs.d"))))
#+END_SRC
** Keybindings
*** Keymap for commands
frame-workflow defines several commands. Important commands are bound in =frame-workflow-map=, so I suggest you bind a global key to it:

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x w") 'frame-workflow-map)
#+END_SRC
*** User keybindings
Optionally, it is a good idea to bind keys to switch to specific frames (or frames of specific frames). 

The following is an example of such a keybinding.
=frame-workflow-switch-frame= is a function that switch to a frame of a given prototype or create a new one.

#+BEGIN_SRC emacs-lisp
  ;; Switch to emacs-lisp frame. If there is none, create a new one.
  (global-set-key (kbd "s-g e")
                  (lambda () (interactive) (frame-workflow-switch-frame 'emacs-lisp)))
#+END_SRC

=frame-workflow-switch-frame= is an interactive command at the same time. You can bind it directly so that it lets you switch to any frame by prototype.

#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "s-s") 'frame-workflow-switch-frame)
#+END_SRC
** Menu
Because frame-workflow is a complex package, it ships with a menu for the menu bar. It is primarily intended as mnemonics, but it allows you to access major features of the package. To use the menu, load =frame-workflow-menu= library:

#+BEGIN_SRC emacs-lisp
  ;; Add a menu for frame-workflow
  (require 'frame-workflow-menu)
#+END_SRC
** Modeline
This package has a modeline integration. It displays the prototype name of the frame as well as the workflow state if it is non-nil. To use this feature, add the following entry to =mode-line-format=:

#+BEGIN_SRC emacs-lisp
  (setq-default mode-line-format
                '(
                  ...
                  ;; Display information on frame-workflow
                  (:eval (when (fboundp 'frame-workflow-mode-line)
                           (frame-workflow-mode-line)))
                  ...
                  )
#+END_SRC
** Integration with frame-purpose
There are two ways to integrate frame-workflow with frame-purpose:

- Set =:make-frame-function= property in each corresponding entry of =frame-workflow-prototype-alist=.
- Use =frame-workflow-purpose.el= shipped with this package.

*** Setting =:make-frame-function= property in each corresponding prototype (recommended)
This is a recommended way to use frame-workflow with frame-purpose. It doesn't affect the behavior of frame-purpose at all, but you have to configure each prototype properly and also create frames using frame-workflow rather than frame-purpose.
With proper prototype settings, frames created by frame-workflow automatically get purposes.

This can be done by setting =:make-frame-function= property of each property to a purpose-specific one. For example, a frame created from a prototype with the following =:make-frame-function= property is restricted to =emacs-lisp-mode=:

#+BEGIN_SRC emacs-lisp
(frame-purpose-make-frame :modes 'emacs-lisp-mode)
#+END_SRC
*** frame-workflow-purpose.el
Even if you prefer creating frames using frame-purpose.el rather than frame-workflow, frame-workflow offers a way to do that. However, this method only works with frames created by =frame-purpose-make-frame= function. It does not work with ones created by =frame-purpose-make-(mode|directory)-frame=. 

To use the integration, first load =frame-workflow-purpose.el=. You also have to alter your =frame-purpose--initial-buffer-fn= so that it calls =frame-workflow-purpose-init-function=. The easiest way is to override the entire function using =frame-workflow-purpose-setup=. Otherwise, you have to set
=frame-purpose--initial-buffer-fn= to your custom function:

#+BEGIN_SRC emacs-lisp
  (require 'frame-workflow-purpose)
  ;; Turn on frame-purpose-mode
  (frame-purpose-mode 1)
  ;; Set `frame-purpose-n-initial-buffer-fn' to a function provided by frame-workflow
  (frame-workflow-purpose-setup)
#+END_SRC
* Usage
** Using the menu
frame-workflow provides a menu named "FrameWorkflow". It supports the following basic operations on frame-workflow:

- Operations on the current frame.
- Switching to other frames.
- Creating a new frame.
- Customization.
** Switching to a frame and creating a frame
The following is a list of commands that can be used to switch to another frame:

- =frame-workflow-make-frame= is a command to create a frame of a given prototype.
- =frame-workflow-select-frame= is a command to switch to an existing frame of a given prototype.
- =frame-workflow-switch-frame= is a command that can do both of these. It switch to a frame of a given prototype if any, and otherwise it creates a new one.

Unlike framegroups or workspace tags in XMonad, it is possible to create multiple frames of the same prototype. This is not really recommended, but it can be useful in some situations. To create a secondary frame, you have to use =frame-workflow-make-frame=, and not =frame-workflow-switch-frame=.
** Applying a prototype to an existing frame
In frame-workflow, you should create a frame using =frame-workflow-make-frame= (or =frame-workflow-switch-frame=), because frame-purpose needs frames to be created with it. However, it is possible to apply a prototype to an existing frame that doesn't have one.

It is also possible to re-apply a prototype to a frame of the same prototype. This is basically used to reload actions for the prototype defined in another frame of the same prototype.
** Per-frame actions
Frame-workflow allows you to define per-frame actions. Prototypes can also have actions, and actions added to a frame can be saved to its prototype, and prototype settings can be persisted. This is another way to enhance your Emacs.

- =frame-workflow-select-action= lets you choose a per-frame action via a =completing-read= interface. It also allows you to create a new action interactively by entering the title of the action.
- =frame-workflow-action-map= is another interface that lets you quickly choose an action via a shortcut key. It is like a [[https://github.com/abo-abo/hydra][Hydra]] interface, but for frame-specific actions.

To define a frame-specific action, use =frame-workflow-add-new-action= or =frame-workflow-select-action=. Actions defined with keybindings will be available in =frame-workflow-action-map=. 

After you add an action, it is recommended that you save the actions to the prototype using =frame-workflow-save-actions-to-prototype=. Then use =frame-workflow-prototype-save-all= to save all prototypes to the custom file.

These action-related commands are available in the menu.
* Contribution
Any comments and patches on this package are welcome. Create a ticket or a pull request on GitHub.
* License
GPL v3
